#include <math.h>
// function untuk aktivasi sigmoid
double sigmoid(double x) { return 1 / (1 + exp(-x)); }
// function untuk aktivasi biopolar
double biopolarSigmoid(double x) { return (2 / (1 + exp(-x)) - 1);}

//  number of input  = 63
static const int numInputs = 63;  

//  number of hidden layer = 3
static const int numHiddenNodes = 3;
float z[numHiddenNodes];

//  number of output = 7
static const int numOutputs = 7;
float y[numOutputs];

static const float learning_rate = 0.1;

//Weight dan bias yang didapat
// weight hidden 
float weight_v[numInputs][numHiddenNodes] = 
{
	{ 	-0.003168,	0.131203,	0.747353,	},
	{ 	0.455475,	0.532433,	0.210705,	},
	{ 	0.043869,	0.678530,	0.671044,	},
	{ 	0.931495,	0.383169,	0.511164,	},
	{ 	0.827791,	0.034239,	0.045208,	},
	{ 	0.526536,	0.670815,	-0.000501,	},
	{ 	0.386463,	0.067093,	0.425407,	},
	{ 	0.687961,	0.589185,	0.934625,	},
	{ 	0.845001,	0.526720,	0.087775,	},
	{ 	0.657116,	0.416333,	0.709443,	},
	{ 	0.913495,	0.762532,	0.270707,	},
	{ 	0.050664,	0.736416,	0.336489,	},
	{ 	0.635826,	0.756744,	0.999239,	},
	{ 	0.362299,	0.246748,	0.974352,	},
	{ 	0.723849,	0.753564,	0.655707,	},
	{ 	0.071522,	0.631426,	0.880519,	},
	{ 	0.275885,	0.436745,	0.774747,	},
	{ 	0.480931,	0.238109,	0.283161,	},
	{ 	0.362440,	0.166799,	0.494770,	},
	{ 	0.900854,	0.909543,	0.068818,	},
	{ 	0.901629,	0.504273,	0.508373,	},
	{ 	0.320221,	0.986851,	0.498167,	},
	{ 	0.264980,	0.090525,	0.943576,	},
	{ 	0.074388,	0.500548,	0.390154,	},
	{ 	0.277716,	0.913617,	0.535425,	},
	{ 	0.465085,	0.940821,	0.056095,	},
	{ 	0.762175,	0.770088,	0.833828,	},
	{ 	0.124878,	0.016068,	0.682778,	},
	{ 	0.869435,	0.629752,	0.740413,	},
	{ 	0.722225,	0.999124,	0.880320,	},
	{ 	0.232568,	0.306480,	0.345060,	},
	{ 	0.512646,	0.591273,	0.840025,	},
	{ 	0.411482,	0.841669,	0.263692,	},
	{ 	0.414895,	0.537505,	0.462294,	},
	{ 	0.287863,	0.178212,	0.159678,	},
	{ 	0.572843,	0.802614,	0.037244,	},
	{ 	0.533261,	0.498272,	0.951172,	},
	{ 	0.751467,	0.554918,	0.898990,	},
	{ 	0.627996,	0.842333,	0.167690,	},
	{ 	0.215927,	0.715044,	0.138681,	},
	{ 	0.094166,	0.274922,	0.011254,	},
	{ 	0.411269,	0.026626,	0.701901,	},
	{ 	0.939063,	0.240119,	0.185086,	},
	{ 	0.316375,	0.886782,	0.647870,	},
	{ 	0.153534,	0.681681,	0.394069,	},
	{ 	0.390924,	0.500075,	0.155787,	},
	{ 	0.590384,	0.845910,	0.598361,	},
	{ 	0.958606,	0.556480,	0.156405,	},
	{ 	0.980258,	0.408516,	0.133900,	},
	{ 	0.566064,	0.252334,	0.492705,	},
	{ 	0.462866,	0.960887,	0.121841,	},
	{ 	0.202956,	0.319584,	0.637522,	},
	{ 	0.129911,	0.651588,	0.629886,	},
	{ 	0.806270,	0.248176,	0.484686,	},
	{ 	0.392501,	0.203584,	0.036574,	},
	{ 	0.898609,	0.426207,	0.133825,	},
	{ 	0.944289,	0.409979,	0.122935,	},
	{ 	0.882451,	0.091839,	0.153945,	},
	{ 	0.067888,	0.365005,	0.244803,	},
	{ 	0.131934,	0.782819,	0.447053,	},
	{ 	0.346349,	0.451967,	0.800692,	},
	{ 	0.928487,	0.651312,	0.207050,	},
	{ 	0.682617,	0.909172,	0.258047,	},
};

// bias hidden 
float bias_v[numHiddenNodes] = { 	0.860860,	0.471262,	0.505956,	};

// weight output 
float weight_w[numHiddenNodes][numOutputs] = 
{
	{ 	0.052536,	1.562386,	0.210779,	-0.054396,	0.343791,	0.046834,	-0.037434,	},
	{ 	0.787662,	0.707265,	0.665093,	0.949891,	0.930911,	0.812315,	0.258444,	},
	{ 	0.081007,	0.973357,	-0.333137,	-0.007188,	0.121089,	0.396743,	0.042057,	},
};

// wbias output 
float bias_w[numOutputs] = { 	-5.019232,	-4.727681,	-5.003669,	-5.001970,	-5.049276,	-5.043950,	-5.015068,	};

